<?xml version="1.0" encoding="UTF-8"?>
<transformation>
  <info>
    <name>transfo_kyle_import_order</name>
    <description/>
    <extended_description/>
    <trans_version/>
    <trans_type>Normal</trans_type>
    <trans_status>0</trans_status>
    <directory>&#47;</directory>
    <parameters>
        <parameter>
            <name>oerp_db</name>
            <default_value>oerp_db</default_value>
            <description/>
        </parameter>
        <parameter>
            <name>oerp_host</name>
            <default_value>oerp_host</default_value>
            <description/>
        </parameter>
        <parameter>
            <name>oerp_port</name>
            <default_value>oerp_port</default_value>
            <description/>
        </parameter>
        <parameter>
            <name>oerp_pwd</name>
            <default_value>oerp_pwd</default_value>
            <description/>
        </parameter>
        <parameter>
            <name>oerp_user</name>
            <default_value>oerp_user</default_value>
            <description/>
        </parameter>
    </parameters>
    <log>
<trans-log-table><connection/>
<schema/>
<table/>
<size_limit_lines/>
<interval/>
<timeout_days/>
<field><id>ID_BATCH</id><enabled>Y</enabled><name>ID_BATCH</name></field><field><id>CHANNEL_ID</id><enabled>Y</enabled><name>CHANNEL_ID</name></field><field><id>TRANSNAME</id><enabled>Y</enabled><name>TRANSNAME</name></field><field><id>STATUS</id><enabled>Y</enabled><name>STATUS</name></field><field><id>LINES_READ</id><enabled>Y</enabled><name>LINES_READ</name><subject/></field><field><id>LINES_WRITTEN</id><enabled>Y</enabled><name>LINES_WRITTEN</name><subject/></field><field><id>LINES_UPDATED</id><enabled>Y</enabled><name>LINES_UPDATED</name><subject/></field><field><id>LINES_INPUT</id><enabled>Y</enabled><name>LINES_INPUT</name><subject/></field><field><id>LINES_OUTPUT</id><enabled>Y</enabled><name>LINES_OUTPUT</name><subject/></field><field><id>LINES_REJECTED</id><enabled>Y</enabled><name>LINES_REJECTED</name><subject/></field><field><id>ERRORS</id><enabled>Y</enabled><name>ERRORS</name></field><field><id>STARTDATE</id><enabled>Y</enabled><name>STARTDATE</name></field><field><id>ENDDATE</id><enabled>Y</enabled><name>ENDDATE</name></field><field><id>LOGDATE</id><enabled>Y</enabled><name>LOGDATE</name></field><field><id>DEPDATE</id><enabled>Y</enabled><name>DEPDATE</name></field><field><id>REPLAYDATE</id><enabled>Y</enabled><name>REPLAYDATE</name></field><field><id>LOG_FIELD</id><enabled>Y</enabled><name>LOG_FIELD</name></field></trans-log-table>
<perf-log-table><connection/>
<schema/>
<table/>
<interval/>
<timeout_days/>
<field><id>ID_BATCH</id><enabled>Y</enabled><name>ID_BATCH</name></field><field><id>SEQ_NR</id><enabled>Y</enabled><name>SEQ_NR</name></field><field><id>LOGDATE</id><enabled>Y</enabled><name>LOGDATE</name></field><field><id>TRANSNAME</id><enabled>Y</enabled><name>TRANSNAME</name></field><field><id>STEPNAME</id><enabled>Y</enabled><name>STEPNAME</name></field><field><id>STEP_COPY</id><enabled>Y</enabled><name>STEP_COPY</name></field><field><id>LINES_READ</id><enabled>Y</enabled><name>LINES_READ</name></field><field><id>LINES_WRITTEN</id><enabled>Y</enabled><name>LINES_WRITTEN</name></field><field><id>LINES_UPDATED</id><enabled>Y</enabled><name>LINES_UPDATED</name></field><field><id>LINES_INPUT</id><enabled>Y</enabled><name>LINES_INPUT</name></field><field><id>LINES_OUTPUT</id><enabled>Y</enabled><name>LINES_OUTPUT</name></field><field><id>LINES_REJECTED</id><enabled>Y</enabled><name>LINES_REJECTED</name></field><field><id>ERRORS</id><enabled>Y</enabled><name>ERRORS</name></field><field><id>INPUT_BUFFER_ROWS</id><enabled>Y</enabled><name>INPUT_BUFFER_ROWS</name></field><field><id>OUTPUT_BUFFER_ROWS</id><enabled>Y</enabled><name>OUTPUT_BUFFER_ROWS</name></field></perf-log-table>
<channel-log-table><connection/>
<schema/>
<table/>
<timeout_days/>
<field><id>ID_BATCH</id><enabled>Y</enabled><name>ID_BATCH</name></field><field><id>CHANNEL_ID</id><enabled>Y</enabled><name>CHANNEL_ID</name></field><field><id>LOG_DATE</id><enabled>Y</enabled><name>LOG_DATE</name></field><field><id>LOGGING_OBJECT_TYPE</id><enabled>Y</enabled><name>LOGGING_OBJECT_TYPE</name></field><field><id>OBJECT_NAME</id><enabled>Y</enabled><name>OBJECT_NAME</name></field><field><id>OBJECT_COPY</id><enabled>Y</enabled><name>OBJECT_COPY</name></field><field><id>REPOSITORY_DIRECTORY</id><enabled>Y</enabled><name>REPOSITORY_DIRECTORY</name></field><field><id>FILENAME</id><enabled>Y</enabled><name>FILENAME</name></field><field><id>OBJECT_ID</id><enabled>Y</enabled><name>OBJECT_ID</name></field><field><id>OBJECT_REVISION</id><enabled>Y</enabled><name>OBJECT_REVISION</name></field><field><id>PARENT_CHANNEL_ID</id><enabled>Y</enabled><name>PARENT_CHANNEL_ID</name></field><field><id>ROOT_CHANNEL_ID</id><enabled>Y</enabled><name>ROOT_CHANNEL_ID</name></field></channel-log-table>
<step-log-table><connection/>
<schema/>
<table/>
<timeout_days/>
<field><id>ID_BATCH</id><enabled>Y</enabled><name>ID_BATCH</name></field><field><id>CHANNEL_ID</id><enabled>Y</enabled><name>CHANNEL_ID</name></field><field><id>LOG_DATE</id><enabled>Y</enabled><name>LOG_DATE</name></field><field><id>TRANSNAME</id><enabled>Y</enabled><name>TRANSNAME</name></field><field><id>STEPNAME</id><enabled>Y</enabled><name>STEPNAME</name></field><field><id>STEP_COPY</id><enabled>Y</enabled><name>STEP_COPY</name></field><field><id>LINES_READ</id><enabled>Y</enabled><name>LINES_READ</name></field><field><id>LINES_WRITTEN</id><enabled>Y</enabled><name>LINES_WRITTEN</name></field><field><id>LINES_UPDATED</id><enabled>Y</enabled><name>LINES_UPDATED</name></field><field><id>LINES_INPUT</id><enabled>Y</enabled><name>LINES_INPUT</name></field><field><id>LINES_OUTPUT</id><enabled>Y</enabled><name>LINES_OUTPUT</name></field><field><id>LINES_REJECTED</id><enabled>Y</enabled><name>LINES_REJECTED</name></field><field><id>ERRORS</id><enabled>Y</enabled><name>ERRORS</name></field><field><id>LOG_FIELD</id><enabled>N</enabled><name>LOG_FIELD</name></field></step-log-table>
    </log>
    <maxdate>
      <connection/>
      <table/>
      <field/>
      <offset>0.0</offset>
      <maxdiff>0.0</maxdiff>
    </maxdate>
    <size_rowset>10000</size_rowset>
    <sleep_time_empty>50</sleep_time_empty>
    <sleep_time_full>50</sleep_time_full>
    <unique_connections>N</unique_connections>
    <feedback_shown>Y</feedback_shown>
    <feedback_size>50000</feedback_size>
    <using_thread_priorities>Y</using_thread_priorities>
    <shared_objects_file/>
    <capture_step_performance>N</capture_step_performance>
    <step_performance_capturing_delay>1000</step_performance_capturing_delay>
    <step_performance_capturing_size_limit>100</step_performance_capturing_size_limit>
    <dependencies>
    </dependencies>
    <partitionschemas>
    </partitionschemas>
    <slaveservers>
    </slaveservers>
    <clusterschemas>
    </clusterschemas>
  <created_user>-</created_user>
  <created_date>2011&#47;03&#47;16 17:04:46.320</created_date>
  <modified_user>-</modified_user>
  <modified_date>2011&#47;03&#47;16 17:04:46.320</modified_date>
  </info>
  <notepads>
  </notepads>
  <connection>
    <name>mysql</name>
    <server>192.168.1.53</server>
    <type>MYSQL</type>
    <access>Native</access>
    <database>openbravopos</database>
    <port>3306</port>
    <username>posuser</username>
    <password>Encrypted 2be98e29139f6bebb9b389d43e9bd9dfe</password>
    <servername/>
    <data_tablespace/>
    <index_tablespace/>
    <attributes>
      <attribute><code>EXTRA_OPTION_MYSQL.defaultFetchSize</code><attribute>500</attribute></attribute>
      <attribute><code>EXTRA_OPTION_MYSQL.useCursorFetch</code><attribute>true</attribute></attribute>
      <attribute><code>FORCE_IDENTIFIERS_TO_LOWERCASE</code><attribute>N</attribute></attribute>
      <attribute><code>FORCE_IDENTIFIERS_TO_UPPERCASE</code><attribute>N</attribute></attribute>
      <attribute><code>IS_CLUSTERED</code><attribute>N</attribute></attribute>
      <attribute><code>PORT_NUMBER</code><attribute>3306</attribute></attribute>
      <attribute><code>QUOTE_ALL_FIELDS</code><attribute>N</attribute></attribute>
      <attribute><code>STREAM_RESULTS</code><attribute>N</attribute></attribute>
      <attribute><code>SUPPORTS_BOOLEAN_DATA_TYPE</code><attribute>N</attribute></attribute>
      <attribute><code>USE_POOLING</code><attribute>N</attribute></attribute>
    </attributes>
  </connection>
  <order>
  <hop> <from>Database join</from><to>Database join 2</to><enabled>Y</enabled> </hop>  <hop> <from>Database join 2</from><to>create sale order</to><enabled>Y</enabled> </hop>  <hop> <from>Get last imported order</from><to>Table input</to><enabled>Y</enabled> </hop>  <hop> <from>Table input</from><to>Database join</to><enabled>Y</enabled> </hop>  </order>
  <step>
    <name>Database join</name>
    <type>DBJoin</type>
    <description/>
    <distribute>Y</distribute>
    <copies>1</copies>
         <partitioning>
           <method>none</method>
           <schema_name/>
           </partitioning>
    <connection>mysql</connection>
    <rowlimit>0</rowlimit>
    <sql>select * from TICKETLINES where ticket = ?</sql>
    <outer_join>N</outer_join>
    <replace_vars>N</replace_vars>
    <parameter>
      <field>
        <name>id</name>
        <type>String</type>
      </field>
    </parameter>
     <cluster_schema/>
 <remotesteps>   <input>   </input>   <output>   </output> </remotesteps>    <GUI>
      <xloc>400</xloc>
      <yloc>150</yloc>
      <draw>Y</draw>
      </GUI>
    </step>

  <step>
    <name>Database join 2</name>
    <type>DBJoin</type>
    <description/>
    <distribute>Y</distribute>
    <copies>1</copies>
         <partitioning>
           <method>none</method>
           <schema_name/>
           </partitioning>
    <connection>mysql</connection>
    <rowlimit>0</rowlimit>
    <sql>select reference, name, code, pricesell from PRODUCTS where id = ?</sql>
    <outer_join>N</outer_join>
    <replace_vars>N</replace_vars>
    <parameter>
      <field>
        <name>PRODUCT</name>
        <type>String</type>
      </field>
    </parameter>
     <cluster_schema/>
 <remotesteps>   <input>   </input>   <output>   </output> </remotesteps>    <GUI>
      <xloc>550</xloc>
      <yloc>150</yloc>
      <draw>Y</draw>
      </GUI>
    </step>

  <step>
    <name>Get last imported order</name>
    <type>TypeExitRubyStep</type>
    <description/>
    <distribute>Y</distribute>
    <copies>1</copies>
         <partitioning>
           <method>none</method>
           <schema_name/>
           </partitioning>
	<scripts>
		<script>
			<title>Ruby Script</title>
			<body>require &quot;rubygems&quot;
require &quot;ooor&quot;

Ooor.new({:url =&gt; &quot;http:&#47;&#47;#{$step.get_variable(&apos;oerp_host&apos;)}:#{$step.get_variable(&apos;oerp_port&apos;)}&#47;xmlrpc&quot;, :database =&gt; $step.get_variable(&apos;oerp_db&apos;), :username =&gt; $step.get_variable(&apos;oerp_user&apos;), :password =&gt; $step.get_variable(&apos;oerp_pwd&apos;)})
$sale_shop_id = SaleShop.search([[&apos;name&apos;, &apos;ilike&apos;, &apos;kyle&apos;]])[0] || 1

last_imported_order_id = SaleOrder.search([[&apos;name&apos;, &apos;ilike&apos;, &apos;IS_&apos;]], 0, 1, &apos;desc&apos;)
#last_imported_order_id = SaleOrder.search([[&apos;name&apos;, &apos;ilike&apos;, &apos;IS_&apos;]]).sort.last
$step.logMinimal &quot;OpenERP ID of last imported POS order #{last_imported_order_id}&quot;

if last_imported_order_id != []
	num = SaleOrder.find(last_imported_order_id[0]).name.split(&quot;_&quot;)[1].to_i
else
	num = 0
end
$step.logMinimal &quot;importing since last POS order found #{num}&quot;
{&quot;num&quot; =&gt; num}</body>
			<role>ROW_SCRIPT</role>
		</script>
	</scripts>
	<rubyVersion>RUBY_1_8</rubyVersion>
	<clearInputFields>N</clearInputFields>

	<outputFields>
		<outputField>
			<name>num</name>
			<type>5</type>
			<update>N</update>
		</outputField>
	</outputFields>
	<rubyVariables>
	</rubyVariables>
	<infoSteps>
	</infoSteps>
	<targetSteps>
	</targetSteps>
	<gemHome/>
     <cluster_schema/>
 <remotesteps>   <input>   </input>   <output>   </output> </remotesteps>    <GUI>
      <xloc>100</xloc>
      <yloc>150</yloc>
      <draw>Y</draw>
      </GUI>
    </step>

  <step>
    <name>Table input</name>
    <type>TableInput</type>
    <description/>
    <distribute>Y</distribute>
    <copies>1</copies>
         <partitioning>
           <method>none</method>
           <schema_name/>
           </partitioning>
    <connection>mysql</connection>
    <sql>select TICKETS.id, datenew, ticketid, tickettype, payment 
from RECEIPTS, TICKETS, PAYMENTS 
where ticketid &gt; ? and tickettype = 0 and TICKETS.id = RECEIPTS.id and PAYMENTS.receipt = RECEIPTS.id and datenew &gt; &quot;2011-03-01&quot;
order by ticketid;</sql>
    <limit>0</limit>
    <lookup>Get last imported order</lookup>
    <execute_each_row>N</execute_each_row>
    <variables_active>N</variables_active>
    <lazy_conversion_active>N</lazy_conversion_active>
     <cluster_schema/>
 <remotesteps>   <input>   </input>   <output>   </output> </remotesteps>    <GUI>
      <xloc>250</xloc>
      <yloc>150</yloc>
      <draw>Y</draw>
      </GUI>
    </step>

  <step>
    <name>create sale order</name>
    <type>TypeExitRubyStep</type>
    <description/>
    <distribute>Y</distribute>
    <copies>1</copies>
         <partitioning>
           <method>none</method>
           <schema_name/>
           </partitioning>
	<scripts>
		<script>
			<title>Ruby Script</title>
			<body>do_import()
nil</body>
			<role>ROW_SCRIPT</role>
		</script>
		<script>
			<title>New Script</title>
			<body>require &quot;rubygems&quot;
require &quot;ooor&quot;

Ooor.new({:url =&gt; &quot;http:&#47;&#47;#{$step.get_variable(&apos;oerp_host&apos;)}:#{$step.get_variable(&apos;oerp_port&apos;)}&#47;xmlrpc&quot;, :database =&gt; $step.get_variable(&apos;oerp_db&apos;), :username =&gt; $step.get_variable(&apos;oerp_user&apos;), :password =&gt; $step.get_variable(&apos;oerp_pwd&apos;)})

$sale_shop_id = SaleShop.search([[&apos;name&apos;, &apos;ilike&apos;, &apos;kyle&apos;]])[0] || 1
$line_count = 0

$last_order_id = false

def do_import

  $line_count += 1
  if $line_count &gt; 0

    #order_exceptions = []
    unknown_product = false

    #######################
    # Get product_id      #
    #######################
    product_ids = ProductProduct.search([[&apos;default_code&apos;, &apos;=&apos;, $row[&quot;reference&quot;]]])
    if product_ids != []
      product_id = product_ids[0]
    else
      #order_exceptions &lt;&lt; $excep_product_id
      unknown_product = true
      product_id = ProductProduct.search([[&apos;name&apos;, &apos;=&apos;, &apos;Unknown&apos;]])[0]
      product_id = ProductProduct.create(:name =&gt; &apos;Unknown&apos;).id unless product_id
    end

    is_new_order = false
    sale_order = SaleOrder.find(:first, :domain =&gt; [[&apos;name&apos;, &apos;=&apos;, &quot;IS_%09d&quot; % $row[&quot;ticketid&quot;]]], :fields =&gt; [&apos;name&apos;])
    unless sale_order #no existing order for such line in OpenERP: so we will create a new one
    
      is_new_order = true
      if $last_order_id #before creaing a new order, we will validate the last previous order
        so = SaleOrder.read($last_order_id, [&apos;name&apos;, &apos;amount_total&apos;, &apos;create_date&apos;])
        t0 = Time.new
        SaleOrder.pay_and_update_rpc($sal_shop_id, so.id, {}, {})
        begin
          so = SaleOrder.read($last_order_id, [&apos;shipped&apos;, &apos;invoiced&apos;])
          SaleOrder.write([$last_order_id], {:state =&gt; &apos;done&apos;, :shipped =&gt; true}) if so[&apos;shipped&apos;] and so[&apos;invoiced&apos;]
          $step.logDebug(&quot;***************** Took #{Time.now - $last_import_time} to import last order #{$row[&quot;ticketid&quot;]}&quot;) if $last_import_time
          $last_import_time = Time.now
        rescue
        end
      end

      #######################
      # Get partner        #
      #######################
      $partner_id = ResPartner.search([[&apos;name&apos;, &apos;=&apos;, &apos;Pos Customer&apos;]])[0]
      $partner_id = ResPartner.create(:name =&gt; &apos;Pos Customer&apos;).id unless $partner_id

      #######################
      # Get adresses        #
      #######################
      address_id = ResPartnerAddress.search([[&apos;partner_id&apos;, &apos;=&apos;, $partner_id], [&apos;type&apos;, &apos;=&apos;, &apos;default&apos;]])[0]
      address_id = ResPartnerAddress.create(:partner_id =&gt; $partner_id, :type =&gt; &apos;default&apos;, :name =&gt; &apos;Pos Customer&apos;).id unless address_id

      #######################
      # Create sale order   #
      #######################
      date_order = $row[&quot;datenew&quot;].year.to_s + &quot;&#47;&quot; + $row[&quot;datenew&quot;].month.to_s + &quot;&#47;&quot; + $row[&quot;datenew&quot;].day.to_s
     
      payment_method_id = PaymentMethod.seach([&apos;name&apos;, &apos;=&apos;, $row[&quot;payment&quot;]])[0]

      sale_order = SaleOrder.new(:name =&gt; &quot;IS_%09d&quot; %$row[&quot;ticketid&quot;], :shop_id =&gt; $sale_shop_id, :order_policy =&gt; &apos;manual&apos;, 
                                  :partner_shipping_id =&gt; address_id, :partner_invoice_id =&gt; address_id, 
                                  :partner_order_id =&gt; address_id, :date_order =&gt; date_order,
                                  :payment_method_id =&gt; payment_method_id)
      sale_order.on_change(&apos;onchange_partner_id&apos;, :partner_id, $partner_id, $partner_id)
      sale_order.partner_shipping_id = address_id
      sale_order.partner_invoice_id = address_id
      sale_order.save({}, false)
      $step.logMinimal(&quot;imported POS order #{sale_order.id}&quot;)
      $last_order_id = sale_order.id
    end #unless sale_order

    
    #######################
    # Create the lines    #
    #######################
    line = SaleOrderLine.search([[&apos;product_id&apos;, &apos;=&apos;, product_id], [&apos;order_id&apos;, &apos;=&apos;, sale_order.id]])[0]
    if line and not unknown_product
      line = SaleOrderLine.find(line, :fields=&gt; [&apos;product_uom_qty&apos;])
      line.product_uom_qty += $row[&quot;UNITS&quot;]
      line.save({}, false)
    else
      line = SaleOrderLine.new(:order_id=&gt;sale_order.id)
      line.on_change(&apos;product_id_change&apos;, :product_id, product_id, 1, product_id, $row[&quot;UNITS&quot;], false, 0, false, &apos;&apos;, $partner_id)
      line.name = &quot;unknown product #{$row[&quot;name&quot;]}&quot; if unknown_product
      line.product_uom_qty = $row[&quot;UNITS&quot;]
      line.price_unit = $row[&quot;PRICE&quot;]
      line.product_uom = ProductProduct.read(product_id, [&apos;uom_id&apos;])[&apos;uom_id&apos;][0]
      line.save({}, false)
    end

  end


end</body>
			<role>INIT_SCRIPT</role>
		</script>
		<script>
			<title>Final Script</title>
			<body>if $last_order_id
	so = SaleOrder.find($last_order_id, :fields =&gt; [&apos;name&apos;, &apos;amount_total&apos;, &apos;create_date&apos;])
	SaleOrder.pay_and_update_rpc($sal_shop_id, so.id, {}, {})
	so = SaleOrder.read($last_order_id, [&apos;invoiced&apos;, &apos;shipped&apos;])
	if so[&apos;invoiced&apos;]
		SaleOrder.write([$last_order_id], {:state =&gt; &apos;done&apos;, :shipped =&gt; true}) if so[&apos;shipped&apos;] and so[&apos;invoiced&apos;]
	end
end</body>
			<role>DISPOSE_SCRIPT</role>
		</script>
	</scripts>
	<rubyVersion>RUBY_1_8</rubyVersion>
	<clearInputFields>N</clearInputFields>

	<outputFields>
	</outputFields>
	<rubyVariables>
	</rubyVariables>
	<infoSteps>
	</infoSteps>
	<targetSteps>
	</targetSteps>
	<gemHome/>
     <cluster_schema/>
 <remotesteps>   <input>   </input>   <output>   </output> </remotesteps>    <GUI>
      <xloc>700</xloc>
      <yloc>150</yloc>
      <draw>Y</draw>
      </GUI>
    </step>

  <step_error_handling>
  </step_error_handling>
   <slave-step-copy-partition-distribution>
</slave-step-copy-partition-distribution>
   <slave_transformation>N</slave_transformation>
</transformation>
